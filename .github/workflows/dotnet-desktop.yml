name: Build and Deploy .NET Microservice

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: "8.0"
  BUILD_CONFIGURATION: "Release"

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./ctcom.product-service/ctcom.product-service.csproj

      - name: Build project
        run: dotnet build ./ctcom.product-service/ctcom.product-service.csproj --configuration ${{ env.BUILD_CONFIGURATION }}

      # - name: Run tests
      #   run: dotnet test --no-build --verbosity normal

  docker-build-and-push:
    name: Docker Build and Push
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: https://docker.levino.ir
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ctcom.product-service/Dockerfile
          push: true
          tags: docker.levino.ir/ctcom.product-service:${{ github.sha }}
          build-args: |
            docker build \
            --build-arg BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }} \
            -t ${{ secrets.DOCKER_USERNAME }}/ctcom-product-service:${{ github.sha }} .

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2054
          script: |
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker pull localhost:2525/ct-dashboard:${{ github.sha }}
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker stop ct-dashboard || true
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker rm ct-dashboard || true
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker run -d --name ct-dashboard -p 7128:7128 localhost:2525/ctcom.product-service:${{ github.sha }}
